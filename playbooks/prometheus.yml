##
# 安装prometheus
#
#
##
# @leif160519 @2020.09.11
####
---
- hosts: all:!off
  vars:
    prometheus_root_dir: /opt/prometheus
    victoria_metrics_root_dir: /opt/victoria-metrics
    # vms数据存储路径
    victoria_metrics_data_dir: /data/victoria-metrics-data
    # vms数据保留时间(单位:月)
    victoria_metrics_retention_period: 6
    alertmanager_root_dir: /opt/alertmanager
    node_exporter_root_dir: /opt/node_exporter
    blackbox_exporter_root_dir: /opt/black_exporter
    prometheusalert_root_dir: /opt/prometheusalert
    nginx_exporter_root_dir: /opt/nginx_exporter
    consul_root_dir: /opt/consul
    consulmanager_passwd: admin-123
    mysqld_exporter_root_dir: /opt/mysqld_exporter
    kminion_root_dir: /opt/kminion
    kafka_exporter_root_dir: /opt/kafka_exporter
    es_exporter_root_dir: /opt/elasticsearch_exporter
    zk_exporter_root_dir: /opt/zookeeper_exporter
    emq_exporter_root_dir: /opt/emq_exporter
    jmx_exporter_root_dir: /opt/jmx_exporter
    promtail_root_dir: /opt/promtail
    loki_root_dir: /opt/loki

    prometheus_version: 2.40.1
    victoria_metrics_version: 1.82.1
    alertmanager_version: 0.24.0
    node_exporter_version: 1.4.0
    blackbox_exporter_version: 0.22.0
    prometheusalert_version: v4.8.2
    nginx_exporter_version: 0.10.0
    consul_version: 1.12.2
    mysqld_exporter_version: 0.14.0
    kminion_version: 2.2.0
    kafka_exporter_version: 1.4.2
    es_exporter_version: 1.3.0
    zk_exporter_version: 0.1.12
    emq_exporter_version: 0.5.1
    jmx_exporter_version: 0.17.0
    promtail_version: v2.6.1
    loki_version: v2.6.1

    prometheus_tag: prometheus-{{ prometheus_version }}.linux-amd64
    victoria_metrics_tag: victoria-metrics-linux-amd64-v{{ victoria_metrics_version }}
    alertmanager_tag: alertmanager-{{ alertmanager_version }}.linux-amd64
    node_exporter_tag: node_exporter-{{ node_exporter_version }}.linux-amd64
    blackbox_exporter_tag: blackbox_exporter-{{ blackbox_exporter_version }}.linux-amd64
    prometheusalert_tag: "{{ prometheusalert_version }}"
    nginx_exporter_tag: nginx-prometheus-exporter_{{ nginx_exporter_version }}_linux_amd64
    consul_tag: consul_{{ consul_version }}_linux_amd64
    mysqld_exporter_tag: mysqld_exporter-{{ mysqld_exporter_version }}.linux-amd64
    kminion_tag: kminion_{{ kminion_version }}_linux_amd64
    kafka_exporter_tag: kafka_exporter-{{ kafka_exporter_version }}.linux-amd64
    es_exporter_tag: elasticsearch_exporter-{{ es_exporter_version }}.linux-amd64
    zk_exporter_tag: zookeeper-exporter-v{{ zk_exporter_version }}-linux
    emq_exporter_tag: emq_exporter-{{ emq_exporter_version }}-linux
    jmx_exporter_tag: jmx_prometheus_javaagent-{{ jmx_exporter_version }}
    promtail_tag: promtail-linux-amd64
    loki_tag: loki-linux-amd64

    prometheus_url: https://github.com/prometheus/prometheus/releases/download/v{{ prometheus_version }}/{{ prometheus_tag }}.tar.gz
    victoria_metrics_url: https://github.com/victoria-metrics/victoria-metrics/releases/download/v1.79.0/{{ victoria_metrics_tag }}.tar.gz
    alertmanager_url: https://github.com/prometheus/alertmanager/releases/download/v{{ alertmanager_version }}/{{ alertmanager_tag }}.tar.gz
    node_exporter_url: https://github.com/prometheus/node_exporter/releases/download/v{{ node_exporter_version }}/{{ node_exporter_tag }}.tar.gz
    blackbox_exporter_url: https://github.com/prometheus/blackbox_exporter/releases/download/v{{ blackbox_exporter_version }}/{{ blackbox_exporter_tag }}.tar.gz
    prometheusalert_url: https://github.com/feiyu563/PrometheusAlert/releases/download/{{ prometheusalert_tag }}/linux.zip
    nginx_exporter_url: https://github.com/nginxinc/nginx-prometheus-exporter/releases/download/v{{ nginx_exporter_version }}/{{ nginx_exporter_tag }}.tar.gz
    consul_url: https://releases.hashicorp.com/consul/{{ consul_version }}/{{ consul_tag }}.zip
    mysqld_exporter_url: https://github.com/prometheus/mysqld_exporter/releases/download/v{{ mysqld_exporter_version }}/{{ mysqld_exporter_tag }}.tar.gz
    kminion_url: https://github.com/redpanda-data/kminion/releases/download/v{{ kminion_version }}/{{ kminion_tag }}.tar.gz
    kafka_exporter_url: https://github.com/danielqsj/kafka_exporter/releases/download/v{{ kafka_exporter_version }}/{{ kafka_exporter_tag }}.tar.gz
    es_exporter_url: https://github.com/prometheus-community/elasticsearch_exporter/releases/download/v{{ es_exporter_version }}/{{ es_exporter_tag }}.tar.gz
    zk_exporter_url: https://github.com/dabealu/zookeeper-exporter/releases/download/v{{ zk_exporter_version }}/{{ zk_exporter_tag }}.tar.gz
    emq_exporter_url: https://github.com/nuvo/emq_exporter/releases/download/v{{ emq_exporter_version }}/{{ emq_exporter_tag }}.tar.gz
    jmx_exporter_url: https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/{{ jmx_exporter_version }}/{{ jmx_exporter_tag }}.jar
    promtail_url: https://github.com/grafana/loki/releases/download/{{ promtail_version }}/{{ promtail_tag }}.zip
    loki_url: https://github.com/grafana/loki/release/download/{{ loki_version }}/{{ loki_tag}}.zip
  handlers:
    - name: reload alertmanager
      service:
        name: alertmanager
        state: reloaded
    - name: reload blackbox_exporter
      service:
        name: blackbox_exporter
        state: reloaded
    - name: reload prometheusalert
      service:
        name: prometheusalert
        state: reloaded
    - name: restart promtail
      service:
        name: promtail
        state: restarted
    - name: restart loki
      service:
        name: loki
        state: restarted
  tasks:
    - name: user and group and directories
      tags: [common]
      block:
      - name: install needed packages # {{{ | 前置工作
        package:
          name: "{{ item }}"
          state: present
        with_items:
          - curl
          - tar
          - bzip2

      - name: create prometheus system group
        group:
          name: prometheus
          system: true
          state: present

      - name: create prometheus system user
        user:
          name: prometheus
          system: true
          shell: "/usr/sbin/nologin"
          group: "prometheus"
          createhome: no

      - name: 创建prometheus目录
        file:
          path: "{{ item }}"
          state: directory
          owner: "prometheus"
          group: "prometheus"
          mode: 0755
        with_items:
          - "/etc/prometheus/conf.d/"
          - "/var/log/prometheus/"
        # }}}

    - name: prometheus # {{{
      tags: [never, prometheus]
      block:
      - name: stat prometheus
        stat:
          path: "{{ prometheus_root_dir }}"
        register: p

      - name: 解压prometheus安装包
        unarchive:
          src: "{{ prometheus_url }}"
          dest: /opt
          owner: prometheus
          group: prometheus
          remote_src: yes
        when: p.stat.exists == false

      - name: 重命名prometheus目录
        command: mv /opt/{{ prometheus_tag }} {{ prometheus_root_dir}}
        when: p.stat.exists == false

      - name: 创建prometheus软链接
        file:
          src: "{{ prometheus_root_dir }}/{{ item }}"
          dest: "/usr/local/bin/{{ item }}"
          state: link
          force: true
        with_items:
          - prometheus
          - promtool
        # }}}

    - name: victoria-metrics # {{{
      tags: [never, victoria, victoria-metrics]
      block:
      - name: stat victoria-metrics
        stat:
          path: "{{ victoria_metrics_root_dir }}"
        register: v

      - name: create unarchive dir
        file:
          path: /opt/victoria-metrics
          state: directory
          owner: prometheus
          group: prometheus
          mode: 0755

      - name: unarchive victoria-metrics
        unarchive:
          src: "{{ victoria_metrics_url }}"
          dest: /opt/victoria-metrics
          owner: prometheus
          group: prometheus
          remote_src: true
        when: v.stat.exists == false

      - name: create victoria-metrics soft link
        file:
          src: "{{ victoria_metrics_root_dir }}/{{ item }}"
          dest: "/usr/local/bin/{{ item }}"
          state: link
          force: true
        with_items:
          - victoria-metrics-prod

      - name: create victoria-metrics service
        template:
          src: files/prometheus/victoria-metrics.service.j2
          dest: /lib/systemd/system/victoria-metrics.service
          mode: 0644

      - name: start victoria-metrics service
        service:
          name: victoria-metrics
          state: enabled
          enabled: true
          daemon_reload: true
      # }}}

    - name: alertmanager # {{{
      tags: [never, alertmanager]
      block:
      - name: stat alertmanager
        stat:
          path: "{{ alertmanager_root_dir }}"
        register: a

      - name: 解压alertmanager安装包
        unarchive:
          src: "{{ alertmanager_url }}"
          dest: /opt
          owner: prometheus
          group: prometheus
          remote_src: yes
        when: a.stat.exists == false

      - name: 重命名alertmanager目录
        command: mv /opt/{{ alertmanager_tag }} {{ alertmanager_root_dir }}
        when: a.stat.exists == false

      - name: 创建alertmanager软链接
        file:
          src: "{{ alertmanager_root_dir }}/{{ item }}"
          dest: "/usr/local/bin/{{ item }}"
          state: link
          force: true
        with_items:
          - alertmanager
          - amtool

      - name: 复制alertmanager配置文件
        template:
          src: files/prometheus/alert/alertmanager.yml
          dest: /etc/prometheus/alertmanager.yml
          force: true
          owner: prometheus
          group: prometheus
          mode: 0644
          validate: "/opt/alertmanager/amtool --alertmanager.url= check-config %s"
        notify: reload alertmanager

      - name: 创建alertmanager服务
        template:
          src: files/prometheus/service/alertmanager.service.j2
          dest: /lib/systemd/system/alertmanager.service
          mode: 0644

      - name: 创建storage目录
        file:
          path: /var/lib/alertmanager
          state: directory
          owner: prometheus
          group: prometheus
          mode: 0755

      - name: 启动alertmanager服务
        service:
          name: alertmanager
          state: started
          daemon_reload: true
          enabled: true
        # }}}

    - name: prometheusalert # {{{
      tags: never, prometheusalert
      block:
      - name: stat prometheusalert
        stat:
          path: "{{ prometheusalert_root_dir }}/PrometheusAlert"
        register: pa

      - name: 解压prometheusalert安装包
        unarchive:
          src: "{{ prometheusalert_url }}"
          dest: /opt
          owner: prometheus
          group: prometheus
          remote_src: yes
        when: pa.stat.exists == false

      - name: 重命名解压文件夹
        shell: mv /opt/linux {{ prometheusalert_root_dir }}
        when: pa.stat.exists == false

      - name: 创建prometheusalert软连接
        file:
          src: "{{ prometheusalert_root_dir }}/PrometheusAlert"
          dest: "/usr/local/bin/PrometheusAlert"
          state: link
          force: true
          mode: 0755

      - name: 创建prometheusalert服务
        template:
          src: files/prometheus/service/prometheusalert.service.j2
          dest: /lib/systemd/system/prometheusalert.service
          mode: 0644

      - name: 启动prometheusalert服务
        service:
          name: prometheusalert
          state: started
          enabled: true
          daemon_reload: true
      # }}}

    - name: consul & consulmanager # {{{
      tags: never, consul
      block:
        - name: create consul system group
          group:
            name: consul
            system: true
            state: present

        - name: create consul system user
          user:
            name: consul
            system: true
            shell: /bin/false
            group: consul
            createhome: no

        - name: stat consul
          stat:
            path: "{{ consul_root_dir }}/consul"
          register: consul

        - name: create dir
          file:
            path: "{{ item }}"
            state: directory
            owner: consul
            group: consul
            mode: 0755
          with_items:
            - /opt/consul
            - /etc/consul.d
            - /opt/applications/consul

        - name: unzip consul
          unarchive:
            src: "{{ consul_url }}"
            dest: "{{ consul_root_dir }}"
            owner: consul
            group: consul
            remote_src: yes
          when: consul.stat.exists == false

        - name: create consul link
          file:
            src: "{{ consul_root_dir }}/consul"
            dest: "/usr/bin/consul"
            state: link
            force: true
            mode: 0755

        - name: create consul service
          template:
            src: files/consul.d/consul.service.j2
            dest: /lib/systemd/system/consul.service
            mode: 0644

        - name: config consul
          template:
            src: "files/consul.d/{{ item }}.j2"
            dest: "/etc/consul.d/{{ item }}"
            mode: 0644
            owner: consul
            group: consul
          with_items:
            - consul.env
            - consul.hcl

        - name: start consul service
          service:
            name: consul
            state: started
            enabled: true
            daemon_reload: true

        - name: get consul secret id
          shell: /usr/bin/consul acl bootstrap | grep -i secretid | awk '{print $2}'
          register: secret_id
          failed_when: secret_id.stdout | length == 0

        - set_fact:
            consul_token: "{{ secret_id.stdout }}"
            admin_passwd: "{{ consulmanager_passwd }}"

        - name: output secret id
          debug:
            var: consul_token

        - name: config consulmanager docker-compose
          template:
            src: files/consul.d/docker-compose.yml.j2
            dest: /opt/consul/docker-compose.yml
            mode: 0644
            owner: consul
            group: consul

        - name: start consulmanager
          shell: docker-compose -f {{ consul_root_dir }}/docker-compose.yml up -d
          ignore_errors: false
      when: inventory_hostname == "prometheus-server"
      # }}}

    - name: blackbox_exporter # {{{
      tags: [never, blackbox]
      block:
      - name: stat blackbox
        stat:
          path: "{{ blackbox_exporter_root_dir }}"
        register: b

      - name: 解压blackbox安装包
        unarchive:
          src: "{{ blackbox_exporter_url }}"
          dest: /opt
          owner: prometheus
          group: prometheus
          remote_src: yes
        when: b.stat.exists == false

      - name: 重命名blackbox目录
        command: mv /opt/{{ blackbox_exporter_tag }} {{ blackbox_exporter_root_dir }}
        when: b.stat.exists == false

      - name: 创建blackbox软链接
        file:
          src: "{{ blackbox_exporter_root_dir }}/{{ item }}"
          dest: "/usr/local/bin/{{ item }}"
          state: link
          force: true
        with_items:
          - blackbox_exporter

      - name: blackbox配置文件
        template:
          dest: /etc/prometheus/conf.d/blackbox_exporter.yml
          src: files/prometheus/exporter/blackbox_exporter.yml
          mode: 0644
          owner: prometheus
          group: prometheus
        notify: reload blackbox_exporter

      - name: setcap
        command: setcap cap_net_raw+ep {{ blackbox_exporter_root_dir }}/blackbox_exporter

      - name: 创建blackbox_exporter服务
        template:
          src: files/prometheus/service/blackbox_exporter.service.j2
          dest: /lib/systemd/system/blackbox_exporter.service
          mode: 0644

      - name: 启动blackbox_exporter服务
        service:
          name: blackbox_exporter
          state: started
          enabled: true
          daemon_reload: true
        # }}}

    - name: nginx_exporter # {{{
      tags: never, nginx_exporter
      block:
      - name: stat nginx_exporter
        stat:
          path: "{{ nginx_exporter_root_dir }}/nginx-prometheus-exporter"
        register: n

      - name: 创建解压文件夹
        file:
          path: /opt/nginx_exporter
          state: directory
          owner: prometheus
          group: prometheus
          mode: 0755

      - name: 解压nginx_exporter安装包
        unarchive:
          src: "{{ nginx_exporter_url }}"
          dest: /opt/nginx_exporter
          owner: prometheus
          group: prometheus
          remote_src: yes
        when: n.stat.exists == false

      - name: 创建nginx_exporter软连接
        file:
          src: "{{ nginx_exporter_root_dir }}/nginx-prometheus-exporter"
          dest: "/usr/local/bin/nginx_exporter"
          state: link
          force: true
          mode: 0755

      - name: 创建nginx_exporter服务
        template:
          src: files/prometheus/service/nginx_exporter.service.j2
          dest: /lib/systemd/system/nginx_exporter.service
          mode: 0644

      - name: 启动nginx_exporter服务
        service:
          name: nginx_exporter
          state: started
          enabled: true
          daemon_reload: true
      # }}}

    - name: mysqld_exporter # {{{
      tags: never, mysqld_exporter
      block:
        - name: stat mysqld_exporter
          stat:
            path: "{{ mysqld_exporter_root_dir }}"
          register: m

        - name: unarchive mysqld_exporter
          unarchive:
            src: "{{ mysqld_exporter_url }}"
            dest: /opt
            owner: prometheus
            group: prometheus
            remote_src: true
          when: m.stat.exists == false

        - name: rename mysqld_exporter dir
          shell: mv /opt/{{ mysqld_exporter_tag }} {{ mysqld_exporter_root_dir }}
          when: m.stat.exists == false

        - name: create mysqld_exporter link
          file:
            src: "{{ mysqld_exporter_root_dir }}/{{ item }}"
            dest: "/usr/local/bin/{{ item }}"
            state: link
            force: true
          with_items:
            - mysqld_exporter

        - name: create mysqld_exporter config
          template:
            src: files/prometheus/exporter/mysqld_exporter.cnf.j2
            dest: /etc/prometheus/conf.d/mysqld_exporter.cnf
            mode: 0644
            owner: prometheus
            group: prometheus

        - name: create mysqld_exporter service
          template:
            src: files/prometheus/service/mysqld_exporter.service.j2
            dest: /lib/systemd/system/mysqld_exporter.service
            mode: 0644

        - name: start mysqld_exporter service
          service:
            name: mysqld_exporter
            state: started
            daemon_reload: true
            enabled: true
      # }}}

    - name: scrape_configs_node # {{{
      tags: [ targets ]
      block:
      - set_fact:
          prometheus_targets_node: "{{ groups['all'] }}"
      - name: create static configs for node
        template:
          src: files/prometheus/scrape/file_sd/node.yml.j2
          dest: /etc/prometheus/file_sd/node.yml
        delegate_to: "prometheus-server"
        run_once: true
      when: ('all' in groups)
      # }}}

    - name: scrape_configs_nginx # {{{
      tags: [ targets ]
      block:
      - set_fact:
          prometheus_targets_nginx: "{{ groups['pro.nginx'] }}"
      - template:
          src: files/nginx/stub_status.conf.j2
          dest: /etc/nginx/conf.d/stub_status.conf
          owner: root
          group: root
          mode: 0644
      - template:
          src: files/prometheus/scrape/file_sd/nginx.yml.j2
          dest: /etc/prometheus/file_sd/nginx.yml
        delegate_to: "prometheus-server"
        run_once: true
      when: ('pro.nginx' in group_names)
      # }}}

    - name: scrape_configs_mysql # {{{
      tags: [ targets ]
      block:
      - set_fact:
          prometheus_targets_mysql: "{{ groups['pro.mysql'] }}"
      - template:
          src: files/prometheus/scrape/file_sd/mysql.yml.j2
          dest: /etc/prometheus/file_sd/mysql.yml
        delegate_to: "prometheus-server"
        run_once: true
      when: ('pro.mysql' in group_names)
      # }}}

    - name: scrape_configs_es # {{{
      tags: targets
      block:
      - set_fact:
          prometheus_targets_elasticsearch: "{{ groups['pro.es'] | difference(groups['off']) }}"
      - template:
          src: files/prometheus/scrape/file_sd/elasticsearch.yml.j2
          dest: /etc/prometheus/file_sd/elasticsearch.yml
        delegate_to: "prometheus-server"
        run_once: true
      when: ('pro.es' in group_names)
    # }}}

    - name: scrape_configs_zookeeper # {{{
      tags: targets
      block:
      - set_fact:
          prometheus_targets_zookeeper: "{{ groups['pro.zookeeper'] | difference(groups['off']) }}"
      - template:
          src: files/prometheus/scrape/file_sd/zookeeper.yml.j2
          dest: /etc/prometheus/file_sd/zookeeper.yml
      delegate_to: "prometheus-server"
      run_once: true
      when: ('pro.zookeeper' in group_names)
    # }}}

    - name: scrape_configs_emq # {{{
      tags: targets
      block:
      - set_fact:
          prometheus_targets_emq: "{{ groups['pro.emqx'] | difference(groups['off']) }}"
      - template:
          src: files/prometheus/scrape/file_sd/emq.yml.j2
          dest: /etc/prometheus/file_sd/emq.yml
      delegate_to: "prometheus-server"
      run_once: true
      when: ('pro.emqx' in group_names)
      # }}}

    - name: scrape_configs_clickhouse # {{{
      tags: targets
      block:
      - set_fact:
          prometheus_targets_clickhouse: "{{ groups['pro.clickhouse'] | difference(groups['off']) }}"
      - template:
          src: files/prometheus/scrape/file_sd/clickhouse.yml.j2
          dest: /etc/prometheus/file_sd/clickhouse.yml
      delegate_to: prometheus-server
      run_once: true
      when: ('pro.clickhouse' in group_names )
      # }}}

    - name: scrape_configs_nacos # {{{
      tags: targets
      block:
      - set_fact:
          prometheus_targets_nacos: "{{ groups['pro.nacos'] | difference(groups['off']) }}"
      - template:
          src: files/prometheus/scrape/file_sd/nacos.yml.j2
          dest: /etc/prometheus/file_sd/nacos.yml
      delegate_to: prometheus-server
      run_once: true
      when: ('pro.nacos' in group_names )
      # }}}

    - name: scrape_configs_kafka # {{{
      tags: targets
      block:
      - set_fact:
          prometheus_targets_kafka: "{{ groups['pro.kafka'] | difference(groups['off']) }}"
      - template:
          src: files/prometheus/scrape/file_sd/kafka.yml.j2
          dest: /etc/prometheus/file_sd/kafka.yml
      delegate_to: prometheus-server
      run_once: true
      when: ('pro.kafka' in group_names)
      # }}}

    - name: node_exporter # {{{
      tags: [ node_exporter ]
      block:
      - name: stat node_exporter
        stat:
          path: "{{ node_exporter_root_dir }}"
        register: n

      - name: 解压node_exporter安装包
        unarchive:
          src: "{{ node_exporter_url }}"
          dest: /opt
          owner: prometheus
          group: prometheus
          remote_src: yes
        when: n.stat.exists == false

      - name: 重命名node_exporter目录
        command: mv /opt/{{ node_exporter_tag }} {{ node_exporter_root_dir }}
        when: n.stat.exists == false

      - name: 创建node_exporter软链接
        file:
          src: "{{ node_exporter_root_dir }}/{{ item }}"
          dest: "/usr/local/bin/{{ item }}"
          state: link
          force: true
        with_items:
          - node_exporter

      - name: 创建node_exporter服务
        template:
          src: files/prometheus/service/node_exporter.service.j2
          dest: /lib/systemd/system/node_exporter.service
          mode: 0644

      - name: 启动node_exporter服务
        service:
          name: node_exporter
          state: started
          daemon_reload: true
          enabled: true
        # }}}

    - name: promtail # {{{
      tags: never,promtail
      block:
      - name: stat promtail
        stat:
          path: "{{ promtail_root_dir }}/promtail-linux-amd64"
        register: p

      - name: create unarchive dir
        file:
          path: "{{ promtail_root_dir }}"
          state: directory
          owner: root
          group: root
          mode: 0755

      - name: unarchive package
        unarchive:
          src: "{{ promtail_url }}"
          dest: "{{ promtail_root_dir }}"
          owner: root
          group: root
          remote_src: true
        when: p.stat.exists == false

      - name: create promtail link
        file:
          src: "{{ promtail_root_dir }}/promtail-linux-amd64"
          dest: "/usr/local/bin/promtail"
          state: link
          force: true

      - name: create promtail service
        template:
          src: files/loki/service/promtail.service.j2
          dest: /lib/systemd/system/promtail.service
          mode: 0644

      - name: create storage dir
        file:
          path: /var/lib/loki
          state: directory
          owner: root
          group: root
          mode: 0755

      - name: create promtail config
        template:
          src: files/loki/config/promtail.yml.j2
          dest: "{{ promtail_root_dir }}/promtail.yml"
          mode: 0644
          owner: root
          group: root
        notify: restart promtail

      - name: start promtail service
        service:
          name: promtail
          state: started
          enabled: true
          daemon_reload: true
      # }}}

    - name: loki # {{{
      tags: never, loki
      block:
      - name: stat loki
        stat:
          path: "{{ loki_root_dir }}/loki-linux-amd64"
        register: l

      - name: create unarchive dir
        file:
          path: "{{ loki_root_dir }}"
          state: directory
          owner: root
          group: root
          mode: 0755

      - name: unarchive package
        unarchive:
          src: "{{ loki_url }}"
          dest: "{{ loki_root_dir }}"
          owner: root
          group: root
          remote_src: true
        when: l.stat.exists == false

      - name: create loki link
        file:
          src: "{{ loki_root_dir }}/loki-linux-amd64"
          dest: "/usr/local/bin/loki"
          state: link
          force: true

      - name: create loki service
        template:
          src: files/loki/service/loki.service.j2
          dest: /lib/systemd/system/loki.service
          mode: 0644

      - name: create storage dir
        file:
          path: /var/lib/loki
          state: directory
          owner: root
          group: root
          mode: 0755

      - name: create loki config
        template:
          src: files/loki/config/loki.yml.j2
          dest: "{{ loki_root_dir }}/loki.yml"
          mode: 0644
          owner: root
          group: root
        notify: restart loki

      - name: start loki service
        service:
          name: loki
          state: started
          enabled: true
          daemon_reload: true
      # }}}

    - name: kafka_exporter # {{{
      tags: never, kafka_exporter
      block:
        - name: state kafka_exporter
          stat:
            path: "{{ kafka_exporter_root_dir }}"
          register: k

        - name: unarchive package
          unarchive:
            src: "{{ kafka_exporter_url }}"
            dest: /opt
            owner: prometheus
            group: prometheus
            remote_src: true
          when: k.stat.exists == false

        - name: rename archive dir
          shell: mv /opt/{{ kafka_exporter_tag }} {{ kafka_exporter_root_dir }}
          when: k.stat.exists == false

        - name: create kafka_exporter link
          file:
            src: "{{ kafka_exporter_root_dir }}/{{ item }}"
            dest: "/usr/local/bin/{{ item }}"
            state: link
            force: true
          with_items:
            - kafka_exporter

        - name: create kafka_exporter service
          template:
            src: files/prometheus/service/kafka_exporter.service.j2
            dest: /lib/systemd/system/kafka_exporter.service
            mode: 0644

        - name: start kafka_exporter service
          service:
            name: kafka_exporter
            state: started
            daemon_reload: true
            enabled: true
        # }}}

    - name: kminion # {{{
      tags: never, kminion
      block:
        - name: state kminion
          stat:
            path: "{{ kminion_root_dir }}/kminion"
          register: k

        - name: create unarchive dir
          file:
            path: "{{ kminion_root_dir }}"
            state: directory
            owner: prometheus
            group: prometheus
            mode: 0755

        - name: unarchive kminion
          unarchive:
            src: "{{ kminion_url }}"
            dest: "{{ kminion_root_dir }}"
            owner: prometheus
            group: prometheus
            remote_src: true
          when: k.stat.exists == false

        - name: create kminion link
          file:
            src: "{{ kminion_root_dir }}/kminion"
            dest: "/usr/local/bin/kminion"
            state: link
            force: true
            mode: 0755

        - name: create kminion service
          template:
            src: files/prometheus/service/kminion.service.j2
            dest: /lib/systemd/system/kminion.service
            mode: 0644

        - name: start kminion service
          service:
            name: kminion
            state: started
            daemon_reload: true
            enabled: true
      # }}}

    - name: elasticsearch_exporter # {{{
      tags: never, es_exporter
      block:
        - name: stat elasticsearch_exporter
          stat:
            path: "{{ es_exporter_root_dir }}"
          register: e

        - name: unarchive es
          unarchive:
            src: "{{ es_exporter_url }}"
            dest: /opt
            owner: prometheus
            group: prometheus
            remote_src: yes
          when: e.stat.exists == false

        - name: rename elasticsearch_exporter dir
          shell: mv /opt/{{ es_exporter_tag }} {{ es_exporter_root_dir }}
          when: e.stat.exists == false

        - name: create elasticsearch_exporter link
          file:
            src: "{{ es_exporter_root_dir }}/{{ item }}"
            dest: /usr/local/bin/{{ item }}
            force: true
            state: link
          with_items:
            - elasticsearch_exporter

        - name: create es service
          template:
            src: files/prometheus/service/elasticsearch_exporter.service.j2
            dest: /lib/systemd/system/elasticsearch_exporter.service
            mode: 0644

        - name: start elasticsearch_exporter service
          service:
            name: elasticsearch_exporter
            state: started
            daemon_reload: true
            enabled: true
    # }}}

    - name: zookeeper_exporter # {{{
      tags: never, zk_exporter
      block:
        - name: stat zookeeper_exporter
          stat:
            path: "{{ zk_exporter_root_dir }}"
          register: z

        - name: uanrchive zk
          unarchive:
            src: "{{ zk_exporter_url }}"
            dest: /opt
            owner: prometheus
            group: prometheus
            remote_src: true
          when: z.stat.exists == false

        - name: rename zookeeper_exporter dir
          shell: mv /opt/{{ zk_exporter_tag }} {{ zk_exporter_root_dir }}
          when: z.stat.exists == false

        - name: create zookeeper_exporter link
          file:
            src: "{{ zk_exporter_root_dir }}/{{ item }}"
            dest: /usr/local/bin/{{ item }}
            force: true
            state: link
          with_items:
            - zookeeper-exporter

        - name: create zk service
          template:
            src: files/prometheus/service/zookeeper_exporter.service.j2
            dest: /lib/systemd/system/zookeeper_exporter.service
            mode: 0644

        - name: start zookeeper_exporter service
          service:
            name: zookeeper_exporter
            state: started
            daemon_reload: true
            enabled: true
    # }}}

    - name: emq_exporter # {{{
      tags: never, emq_exporter
      block:
        - name: stat emq_exporter
          stat:
            path: "{{ emq_exporter_root_dir }}"
          register: e

        - name: unarchive emq_exporter
          unarchive:
            src: "{{ emq_exporter_url }}"
            dest: /opt
            owner: prometheus
            group: prometheus
            remote_src: true
          when: e.stat.exists == false

        - name: rename emq_exporter dir
          shell: mv /opt/{{ emq_exporter_tag }} {{ emq_exporter_root_dir }}
          when: e.stat.exists == false

        - name: create emq_exporter link
          file:
            src: "{{ emq_exporter_root_dir }}/{{ item }}"
            dest: /usr/local/bin/{{ item }}
            force: true
            state: link
          with_items:
            - emq_exporter

        - name: create emq_exporter service
          template:
            src: files/prometheus/service/emq_exporter.service.j2
            dest: /lib/systemd/system/emq_exporter.service
            mode: 0644

        - name: create auth.json
          template:
            src: files/prometheus/exporter/auth.json.j2
            dest: /etc/prometheus/conf.d/auth.json
            mode: 0644
            owner: prometheus
            group: prometheus

        - name: start emq_exporter service
          service:
            name: emq_exporter
            state: started
            daemon_reload: true
            enabled: true
      # }}}

    - name: jmx_exporter # {{{
      tags: targets, jmx_exporter
      block:
        - name: stat jmx_exporter
          stat:
            path: "{{ jmx_exporter_root_dir }}"
          register: j

        - name: create jmx_exporter dir
          file:
            path: "{{ jmx_exporter_root_dir }}"
            state: directory
            owner: prometheus
            group: prometheus
            mode: 0755
          when: j.stat.exists == false

        - name: download jmx_exporter
          get_url:
            url: "{{ jmx_exporter_url }}"
            dest: "{{ jmx_exporter_root_dir }}"
            owner: prometheus
            group: prometheus
            mode: 0644
          when: j.stat.exists == false

        - name: create jmx_exporter link
          file:
            path: "{{ jmx_exporter_root_dir }}/jmx_exporter.jar"
            src: "{{ jmx_exporter_root_dir }}/{{ jmx_exporter_tag }}.jar"
            state: link
            force: true

        - name: create jmx.xml
          template:
            dest: "{{ jmx_exporter_root_dir }}/jmx.yml"
            src: files/prometheus/exporter/jmx.yml.j2
            mode: 0644
            owner: prometheus
            group: prometheus
      # }}}

    - name: vmware_exporter # {{{
      tags: never, vmware_exporter
      block:
        - name: install vmware_exporter
          shell: pip3 install vmware_exporter

        - name: create vmware_exporter.yml
          template:
            src: files/prometheus/exporter/vmware_exporter.yml.j2
            dest: /etc/prometheus/conf.d/vmware_exporter.yml
            mode: 0644
            owner: prometheus
            group: prometheus

        - name: create vmware_exporter service
          template:
            src: files/prometheus/service/vmware_exporter.service.j2
            dest: /lib/systemd/system/vmware_exporter.service
            mode: 0644
            owner: root
            group: root

        - name: start vmware_exporter service
          service:
            name: vmware_exporter
            state: started
            daemon_reload: true
            enabled: true
      when: inventory_hostname == "prometheus-server"
    # }}}

- hosts: prometheus-server # {{{ 服务器配置
  tags: [never, admin]
  handlers:
    - name: reload prometheus
      service:
        name: prometheus
        state: reloaded
  vars:
    alertmanager_config_file: "files/prometheus/alert/alertmanager.yml"
    alertmanager_template_files: [ "files/prometheus/alert/*.tmpl" ]
    prometheus_scrape_configs: []
  pre_tasks:
    - set_fact:
        prometheus_targets_node: "{{ groups['all'] }}"
        prometheus_scrape_configs: "{{ prometheus_scrape_configs + lookup('template', item) | from_yaml }}"
        prometheus_targets_nginx: "{{ groups['pro.nginx'] }"
        prometheus_targets_mysql: "{{ groups['pro.mysql'] }"
        prometheus_targets_elasticsearch: "{{ groups['pro.es'] | difference(groups['off']) }}"
        prometheus_targets_zookeeper: "{{ groups['pro.zookeeper'] | difference(groups['off']) }}"
        prometheus_targets_emq: "{{ groups['pro.emqx'] | difference(groups['off']) }}"
        prometheus_targets_clickhouse: "{{ groups['pro.clickhouse'] | difference(groups['off']) }}"
        prometheus_targets_nacos: "{{ groups['pro.nacos'] | difference(groups['off']) }}"
        prometheus_targets_kafka: "{{ groups['pro.kafka'] | difference(groups['off']) }}"
      with_fileglob:
        - "files/prometheus/scrape/*.job"
      when: inventory_hostname is match("^prometheus-server")

    - name: 创建prometheus配置文件夹
      file:
        path: /etc/prometheus/{{ item }}
        state: directory
        owner: root
        group: prometheus
        mode: 0770
      with_items:
        - file_sd

    - name: 从模板创建静态配置
      template:
        src: "{{ item }}"
        dest: /etc/prometheus/file_sd/{{ item | basename | regex_replace('.j2')}}
        force: true
        owner: prometheus
        group: prometheus
        mode: 0644
      with_fileglob:
        - "files/prometheus/scrape/file_sd/*.j2"
      notify: reload prometheus

  roles:
    - role: roles/cloudalchemy.prometheus
      prometheus_skip_install: true
      prometheus_storage_retention: 6h
      prometheus_storage_retention_size: 10GB
      porometheus_global:
        scrape_interval: 25s
        scrape_timeout: 15s
        evaluation_interval: 25s
      prometheus_alert_rules: []
      prometheus_alert_rules_files: [ "files/prometheus/alert/rules/*.rules" ]
      prometheus_web_external_url: "http://{{ ansible_host }}:9090"
      prometheus_alertmanager_config:
        - static_configs:
            - targets:
                - "{{ ansible_host }}:9093"
      prometheus_remote_write:
          - url: http://{{ hostvars['prometheus-server']['ansible_host'] }}:8428/api/v1/write
    # }}}
