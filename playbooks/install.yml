##
# 安装基础软件
#
#
##
# @leif160519 @2020.08.29
####
---
- name: Install software
  hosts: all:!off
  vars:
    username: root
    groupnme: root
  tasks:
    - name: Update software # {{{
      tags: [update]
      block:
        - apt:
            update_cache: yes
            upgrade: full
          when: ansible_os_family == "Debian"

        - yum:
            name: "*"
            state: latest
            update_cache: yes
          when: ansible_os_family == "RedHat"

      # }}}

    - name: Install common software # {{{
      tags: [common]
      block:
        - package:
            name: "{{ item }}"
            state: latest
          with_items:
            - yum-utils
            - epel-release
            - nagios                        # 主要用于监控一台或者多台本地主机及远程的各种信息，包括本机资源及对外的服务等
            - nc                            # 在网络工具中有”瑞士军刀”的美誉，它短小精悍，功能强
            - perf                          # 是一款Linux性能分析工具
            - bind-utils
            - ShellCheck                    # shell脚本静态检查工具，能够识别语法错误以及不规范的写法(centos下安装得大写)
            - nfs-utils                     # nfs服务端和客户端
            - samba-client                  # smb客户端
            - iputils
            - trafshow                      # 网络带宽监控工具
          when: ansible_os_family == "RedHat"
          ignore_errors: yes

        - package:
            name: "{{ item }}"
            state: latest
          with_items:
            - apt-utils
            - rar
            - unrar
            - p7zip-full
            - screenfetch
            - neofetch
            - linuxlogo
            - silversearcher-ag             # ag:比grep、ack更快的递归搜索文件内容
            - mycli                         # mysql客户端，支持语法高亮和命令补全，效果类似ipython，可以替代mysql命令
            - shellcheck                    # shell脚本静态检查工具，能够识别语法错误以及不规范的写法
            - fzf                           # 命令行下模糊搜索工具，能够交互式智能搜索并选取文件或者内容，配合终端ctrl-r历史命令搜索简直完美
            - icdiff                        # 分屏显示 diff
            - ranger                        # 内容浏览/预览
            - tldr                          # 如果你经常不想详读man文档，那么你应该试试这个小工具
            - nfs-common                    # nfs客户端
            - smbclient                     # smb客户端
            - dkms                          # 动态内核模块支持
            - oping                         # 一段时间内的ping情况,用法(n)oping <ip>
            - exfat-utils                   # exfat 文件系统支持
            - s-tui                         # 压力测试工具
            - rename                        # 批量重命名
            - ctop
            - lm-sensors                    # 监控CPU温度
            - cbm                           # 带宽监控工具
            - speedometer                   # 同上
            - pktstat                       # 网络监控工具
            - netdiag                       # 同上
            - ripgrep                       # 通过正则快速查找文件内容工具
            - gdebi                         # 安装deb包，类似dpkg
            - whohas                        # 在发行版中查找软件包
            - powerline                     # 解决zsh乱码问题
            - cmatrix                       # 终端打印矩阵
            - httperf                       # web压测工具
            - nmon                          # 显示系统信息和性能
          when: ansible_os_family == "Debian"
          ignore_errors: yes
      # }}}

    - name: Install gui software # {{{
      tags: [never, gui]
      block:
        - package:
            name: "{{ item }}"
            state: latest
          with_items:
            - kompare                       # GUI 文件对比工具
            - meld                          # GUI 文件对比工具
            - kdiff3                        # GUI 比较和合并工具
            - tkcvs                         # GUI 文件比较工具
            - yakuake                       # 终端工具(搭配图形化界面，支持lrzsz)
            - nautilus                      # 打开文件管理器
            - remmina                       # 远程连接windows
            - stacer                        # Debian清理工具
            - copyq                         # Debian剪切板复制工具
            - xsensors                      # 监控cpu显卡温度和电压
            - conky                         # 同上
            - guake                         # 终端工具
            - aterm                         # 同上
            - gpick                         # 取色器
            - flameshot                     # 截图工具
            - nnn                           # 终端文件管理器
            - hardinfo                      # 类似hwinfo，硬件检查工具
            - bleachbit                     # 系统记录清理工具
            - diffuse                       # 文件比较工具
            - retext                        # markdown工具
            - kazam                         # 屏幕录制工具
            - okular                        # 阅读器
          when: ansible_os_family == "Debian"
          ignore_errors: yes
      # }}}

    - name: Install Linux general software package # {{{
      tags: [never, general]
      block:
        - package:
            name: "{{ item }}"
            state: latest
          with_items:
            - nano
            - vim
            - emacs
            - zip
            - unzip
            - git
            - bash-completion
            - wget
            - iftop                         # 网络工具
            - htop
            - iotop                         # iotop命令是一个用来监视磁盘I/O使用状况的top类工具
            - nethogs                       # 是一个开源的命令行工具（类似于Linux的top命令），用来按进程或程序实时统计网络带宽使用率
            - mrtg                          # 是通过SNMP 协议，向运行snmp协议主机询问相关的资料后，主机传递数值给MRTG ，然后MRTG 再绘制成网页上的图表
            - telnet
            - traceroute
            - tree
            - iperf                         # 一个网络性能测试工具
            - lsof                          # lsof命令用于查看你进程开打的文件，打开文件的进程，进程打开的端口(TCP、UDP)
            - dpkg                          # dpkg命令是Debian Linux系统用来安装、创建和管理软件包的实用工具
            - expect
            - hdparm                        # 硬盘测速工具，用法：hdparm -Tt /dev/sda
            - psmisc
            - fping                         # 类似于ping协议回复请求以检测主机是否存在
            - tcpdump                       # tcpdump命令是一款sniffer工具，它可以打印所有经过网络接口的数据包的头信息，也可以使用-w选项将数据包保存到文件中，方便以后分析
            - nmap                          # 是一款开放源代码的网络探测和安全审核工具，它的设计目标是快速地扫描大型网络
            - fio                           # fio是一个IO测试工具，可以运行在Linux、Windows等多种系统之上，可以用来测试本地磁盘、网络存储等的性能
            - strace                        # 是一个集诊断、调试、统计与一体的工具
            - sysstat
            - monit                         # 是一款功能非常丰富的进程、文件、目录和设备的监测软件
            - ansible
            - dosfstools
            - uuid
            - make
            - colordiff
            - subnetcalc
            - groovy
            - python
            - python3
            - python3-pip
            - w3m                           # w3m是个开放源代码的命令行下面的网页浏览器。
            - lynx                          # lynx命令是终端上的纯文本模式的网页浏览器，没有JS引擎，不支持CSS排版、图形、音视频等多媒体信息。只能作为一个很有趣的小玩具。
            - dos2unix
            - curl
            - nload                         # 流量监控 nload -u M <network_interface>
            - cifs-utils                    # windows 文件系统支持
            - xfsprogs                      # xfs文件系统支持
            - net-tools                     # 网络工具
            - curlftpfs                     # ftp 挂载工具
            - tig                           # 字符模式下交互查看git项目，可以替代git命令
            - jq                            # 文件处理以及格式化显示，支持高亮，可以替换python -m json.tool
            - mosh                          # 基于UDP的终端连接，可以替代ssh，连接更稳定，即使IP变了，也能自动重连
            - axel                          # 多线程下载工具，下载文件时可以替代curl、wget
            - lrzsz                         # sz/rz:交互式文件传输，在多重跳板机下传输文件非常好用，不用一级一级传输
            - cloc                          # 代码统计工具，能够统计代码的空行数、注释行、编程语言
            - ccache                        # 高速C/C++编译缓存工具，反复编译内核非常有用
            - tmux                          # 终端复用工具，替代screen、nohup
            - byobu                         # 文本窗口管理器、终端复用器、集成运维环境
            - neovim                        # 替代vim
            - mc                            # mcedit：终端下面的 NotePad++
            - powerman                      # pm：在 bash / zsh 中迅速切换项目目录
            - ncdu                          # 可视化的空间分析程序
            - glances                       # 更强大的 htop / top 代替者
            - dstat                         # 是一个用来替换vmstat、iostat、netstat、nfsstat和ifstat这些命令的工具
            - pcp                           # 性能监控工具
            - multitail                     # 多重 tail
            - figlet                        # 将输入字符转换成艺术字体
            - wdiff                         # 文件对比工具
            - smartmontools                 # 磁盘检测工具
            - ntpdate                       # 时间同步工具
            - lsb
            - fortune-mod                   # zsh主题依赖:随机格言
            - ethtool                       # 查看网卡信息
            - lvm2                          # lvm磁盘工具
            - enca                          # 识别文件编码
            - nload                         # 网络工具
            - iptraf                        # 同上
            - bmon                          # 同上
            - slurm                         # 同上
            - tcptrack                      # 同上
            - vnstat                        # 同上
            - bwm-ng                        # 同上
            - ifstat                        # 同上
            - collectl                      # 同上
            - zstd                          # 压缩工具
            - moreutils                     # ts时间戳
            - nvme-cli                      # nvme硬盘的终端工具
            - unhide                        # 查看隐藏进程
            - highlight                     # 高亮显示
            - speedtest-cli                 # 带宽测试工具
            - pwgen                         # 一个生成随机、无特殊含义但可以正常拼读的密码
            - slurm                         # 网卡监控
          ignore_errors: yes
      # }}}

    - name: Uninstall snapd # {{{ | Debian
      tags: [common]
      block:
        - apt:
            name: snapd
            state: absent
            purge: yes
          ignore_errors: yes
          when: ansible_os_family == "Debian"
      # }}}

    - name: Start related services # {{{
      tags: [never, general]
      block:
        - service:
            name: "{{ item }}"
            state: started
            enabled: yes
          with_items:
            - sysstat
            - monit
          ignore_errors: yes
      # }}}

    - name: Clean up dependent packages # {{{
      tags: [common, general, gui]
      block:
        - apt:
            autoremove: yes
          when: ansible_os_family == "Debian"

        - yum:
            autoremove: yes
          when: ansible_os_family == "RedHat"
      # }}}

    - name: Clean up the installation package (cache) # {{{
      tags: [common, general, gui]
      block:
        - apt:
            autoclean: yes
          when: ansible_os_family == "Debian"

        - shell: apt clean
          ignore_errors: true
          when: ansible_os_family == "Debian"

        - shell: yum clean all
          ignore_errors: true
          when: ansible_os_family == "RedHat"
      # }}}

## {{{ Install grafana
# 官方下载地址:
# https://grafana.com/grafana/download
# https://github.com/grafana/grafana/releases
###
    - name: Install grafana
      tags: [never, grafana]
      vars:
        grafana_deb_version: grafana_8.5.0_amd64
        grafana_rpm_version: grafana-8.5.0-1.x86_64
        grafana_deb_url: https://dl.grafana.com/oss/release/{{ grafana_deb_version }}.deb
        grafana_rpm_url: https://dl.grafana.com/oss/release/{{ grafana_rpm_version }}.rpm
      block:
        - stat:
            path: /usr/sbin/grafana-cli
          register: grafana_cmd

        - package:
            name: "{{ item }}"
          with_items:
            - adduser
            - libfontconfig1
            - python-apt
            - python3-apt
          when: ansible_os_family == "Debian"

        - apt:
            deb: "{{ grafana_deb_url }}"
            state: present
          when: (ansible_os_family == "Debian") and (grafana_cmd.stat.exists == false)

        - yum:
            name: "{{ grafana_rpm_url }}"
            state: present
          when: (ansible_os_family == "RedHat") and (grafana_cmd.stat.exists == false)

        - service:
            name: grafana-server
            state: started
            enabled: yes
    # }}}

## {{{ Install gitlab
# 官方包下载地址:https://packages.gitlab.com/gitlab/gitlab-ce
# Quick install:
#     curl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash
#     curl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash
####
    - name: Install gitlab
      tags: [never, gitlab]
      vars:
        gitlab_rpm_version: gitlab-ce-14.5.2-ce.0.el7.x86_64
        gitlab_rpm_url: https://packages.gitlab.com/gitlab/gitlab-ce/packages/el/7/{{ gitlab_rpm_version }}.rpm/download.rpm
        gitlab_deb_version: gitlab-ce_14.5.2-ce.0_amd64
        gitlab_deb_url: https://packages.gitlab.com/gitlab/gitlab-ce/packages/{{ ansible_lsb.id | lower }}/{{ ansible_lsb.codename }}/{{ gitlab_deb_version }}.deb/download.deb
      block:
        - stat:
            path: /bin/gitlab-ctl
          register: gitlab_cmd

        - yum:
            name: "{{ gitlab_rpm_url }}"
            state: present
          when: (ansible_machine=="x86_64") and (gitlab_cmd.stat.exists == false) and (ansible_os_family == "RedHat")

        - apt:
            deb: "{{ gitlab_deb_url }}"
            state: present
          when: (ansible_machine=="x86_64") and (gitlab_cmd.stat.exists == false) and (ansible_os_family == "Debian")

        - lineinfile:
            dest: /etc/gitlab/gitlab.rb
            regexp: '^external_url'
            line: "external_url 'http://{{ ansible_host }}'"

        - lineinfile:
            dest: /etc/gitlab/gitlab.rb
            regexp: "backup_keep_time"
            state: absent

        - lineinfile:
            dest: /etc/gitlab/gitlab.rb
            regexp: "backup_keep_time"
            insertafter: "The duration in seconds to keep backups before they are allowed to be deleted"
            line: "gitlab_rails['backup_keep_time'] = 604800"

        - cron:
            minute: 0
            hour: 2
            day: "*"
            month: "*"
            weekday: "*"
            job: "/opt/gitlab/bin/gitlab-rake gitlab:backup:create CRON=1"
            name: gitlab
            state: present
            user: root

        - shell: |
            gitlab-ctl reconfigure
          ignore_errors: true
    # }}}

## {{{ upgrade git version
# github地址：https://github.com/git/git/releases
# 备用地址: https://mirrors.edge.kernel.org/pub/software/scm/git/
###
    - name: Upgrade git version for redhat
      tags: [never, git]
      vars:
        git_version: git-2.34.1
        git_url: https://mirrors.edge.kernel.org/pub/software/scm/git/{{ git_version }}.tar.xz
      block:
        - shell: git version | awk '{print $3}'
          register: git_version_old

        - debug:
            msg: "当前机器并未安装git"
          when: git_version_old is failed

        - debug:
            msg: "当前已安装git版本:{{ git_version_old.stdout }}"
          when: not (git_version_old is failed)

        - debug:
            msg: "待安装git版本{{ git_version.split('-')[1] }}"

        - block:
            - unarchive:
                copy: false
                src: "{{ git_url }}"
                dest: /tmp
                owner: root
                group: root
                mode: 0755

            - package:
                name: "{{ item }}"
                state: latest
              with_items:
                - curl-devel
                - expat-devel
                - gettext-devel
                - openssl-devel
                - zlib-devel
                - asciidoc
                - gcc
                - perl-ExtUtils-MakeMaker
                - perl
                - cpio
                - openssl
                - zlib
                - autoconf
                - tk

            - shell: |
                cd /tmp/{{ git_version }}
                autoconf
                ./configure
                make
                make install
              ignore_errors: true

            - shell: git version
              register: git_version_new

            - debug:
               msg: "{{ git_version_new.stdout }}"

            - shell: echo "重新登录shell即可生效"

          when: git_version_old.stdout is version(git_version.split('-')[1],"<")
      when: ansible_distribution == "CentOS"

    - name: Upgrade git version for ubuntu
      tags: [never, git]
      block:
        - apt:
            name: software-properties-common
            state: latest

        - apt_repository:
            repo: git-core/ppa
          ignore_errors: true

        - apt:
            name: git
            state: latest

        - apt:
            autoclean: yes

        - apt:
            autoremove: yes

        - shell: apt clean && apt autoclean
          ignore_errors: yes
      when: ansible_distribution == "Ubuntu"
    # }}}

    - name: Install ccat # {{{
      tags: never, alias, ccat
      vars:
        ccat_version: linux-amd64-1.1.0
        ccat_url: https://github.com/jingweno/ccat/releases/download/v1.1.0/{{ ccat_version }}.tar.gz
      block:
        - stat:
            path: /usr/local/bin/ccat
          register: ccat_file

        - stat:
            path: ~{{ username }}/.zshrc
          register: zsh_config

        - name: download and unarchive
          unarchive:
            copy: false
            src: "{{ ccat_url }}"
            dest: /tmp
            mode: 0755
            owner: root
            group: root
          when: ccat_file.stat.exists == false

        - name: copy ccat
          shell: cp /tmp/linux-amd64-1.1.0/ccat /usr/local/bin
          ignore_errors: true
          when: ccat_file.stat.exists == false

        - name: config bash
          lineinfile:
            dest: ~{{ username }}/.bashrc
            line: 'alias ccat=ccat'
            owner: "{{ username }}"
            group: "{{ groupname }}"

        - name: config zsh
          lineinfile:
            dest: ~{{ username }}/.zshrc
            line: 'alias cat=ccat'
            owner: "{{ username }}"
            group: "{{ groupname }}"
          when: zsh_config.stat.exists == true

        - name: 重新登录终端生效
          shell: echo "重新登录终端生效"
    # }}}

    - name: Install rar # {{{
      tags: never, rar
      vars:
        rar_version_x64: rarlinux-x64-5.7.1
        rar_version_x32: rarlinux-5.7.1
        rar_url_x64: http://www.rarlab.com/rar/{{ rar_version_x64 }}.tar.gz
        rar_url_x32: http://www.rarlab.com/rar/{{ rar_version_x32 }}.tar.gz
      block:
        - stat:
            path: /usr/local/bin/rar
          register: rar_cmd

        - unarchive:
            copy: false
            src: "{{ rar_url_x64 }}"
            dest: /tmp
            owner: root
            group: root
          when: (ansible_machine == "x86_64") and (rar_cmd.stat.exists == false)

        - unarchive:
            copy: false
            src: "{{ rar_url_x32 }}"
            dest: /tmp
            owner: root
            group: root
          when: (not ansible_machine == "x86_64") and (rar_cmd.stat.exists == false)

        - shell: |
            cd /tmp/rar/
            make
          ignore_errors: yes
          when: rar_cmd.stat.exists == false
    # }}}

    - name: Install nodejs # {{{
      tags: never, nodejs
      block:
        - name: 安装nodejs和npm
          package:
            name: "{{ item }}"
            state: latest
          with_items:
            - nodejs
            - npm

        - name: 设置淘宝源
          shell: npm config set registry https://registry.npm.taobao.org
          ignore_errors: yes

        - name: 安装工具n
          shell: npm install n -g
          ignore_errors: yes

        - name: 安装最新稳定版nodejs
          shell: n stable
          ignore_errors: yes

        - name: 安装cnpm
          shell: npm install -g cnpm
          ignore_errors: yes
        # }}}

    - name: Install highlight # {{{
      tags: never, alias, highlight
      block:
        - stat:
            path: ~{{ username }}/.zshrc
          register: zsh_config

        - package:
            name: highlight
            state: latest

        - lineinfile:
            path: ~{{ username }}/.bashrc
            line: "alias hcat='highlight -O ansi --force'"
            owner: "{{ username }}"
            group: "{{ groupname }}"

        - lineinfile:
            path: ~{{ username }}/.zshrc
            line: "alias hcat='highlight -O ansi --force'"
            owner: "{{ username }}"
            group: "{{ groupname }}"
          when: zsh_config.stat.exists == true
    # }}}

    - name: Install lolcat # {{{
      tags: never, alias, logcat
      block:
        - stat:
            path: ~{{ username }}/.zshrc
          register: zsh_config

        - package:
            name: lolcat
            state: latest

        - lineinfile:
            path: ~{{ username }}/.bashrc
            line: 'alias lcat=lolcat'
            owner: "{{ username }}"
            group: "{{ groupname }}"

        - lineinfile:
            path: ~{{ username }}/.zshrc
            line: 'alias lcat=lolcat'
            owner: "{{ username }}"
            group: "{{ groupname }}"
          when: zsh_config.stat.exists == true
      when: ansible_distribution == "Ubuntu"
    # }}}

    - name: Install bat # {{{
      tags: never, alias, bat
      block:
        - stat:
            path: ~{{ username }}/.zshrc
          register: zsh_config

        - apt:
            deb: https://github.com/sharkdp/bat/releases/download/v0.21.0/bat_0.21.0_amd64.deb

        - lineinfile:
            path: ~{{ username }}/.zshrc
            line: 'alias cat="bat --theme=OneHalfDark --paging=never -p"'
            owner: "{{ username }}"
            group: "{{ groupname }}"
          when: zsh_config.stat.exists == true

        - lineinfile:
            path: ~{{ username }}/.bashrc
            line: 'alias cat="bat --theme=OneHalfDark --paging=never -p"'
            owner: "{{ username }}"
            group: "{{ groupname }}"
      when: ansible_os_family == "Debian"
      # }}}

    - name: Install pygmentize # {{{
      tags: never, alias, pygmentize
      block:
        - stat:
            path: ~{{ username }}/.zshrc
          register: zsh_config

        - package:
            name: pygmentize
            state: latest

        - lineinfile:
            path: ~{{ username }}/.bashrc
            line: "alias pcat='pygmentize -g'"
            owner: "{{ username }}"
            group: "{{ groupname }}"

        - lineinfile:
            path: ~{{ username }}/.zshrc
            line: "alias pcat='pygmentize -g'"
            owner: "{{ username }}"
            group: "{{ groupname }}"
          when: zsh_config.stat.exists == true
      when: ansible_distribution == "Ubuntu"
    # }}}

- name: Install docker & docker-compose # {{{
  hosts: all:!off
  tags: never, docker
  vars:
    docker_root_dir: /var/lib/docker
    address: 198.18.0.0/16
    size: 24
    mirrors1: http://hub-mirror.c.163.com
    mirrors2: https://registry.cn-hangzhou.aliyuncs.com
    mirrors3: http://docker.mirrors.ustc.edu.cn
    mirrors4: https://registry.docker-cn.com
    log_max_file: 3
    log_max_size: 10m
  roles:
    - role: roles/leif160519.docker
  # }}}

- name: Install moosefs # {{{
  hosts: pro.moosefs:!mfsmaster
  tags: never, moosefs
  roles:
    - role: roles/leif160519.moosefs
# }}}

- name: Install minio server # {{{
  hosts: pro.minio
  tags: never, minio
  vars:
    minio_root_user: admin
    minio_root_password: password
    minio_identity_ldap: off
    ldap_server: ""
    ldap_bind_dn: ""
    ldap_bind_dn_password: ""
    ldap_base_dn: ""
    minio_job_name: minio-cluster
    minio_cache_drives: /mnt/cache
    minio_cache_exclude: "*.jpg,*.png,*.jpg"
  roles:
    - role: roles/leif160519.minio-cluster
# }}}

- name: Install mysql-5.7.28 # {{{
  hosts: all:!off
  tags: never, mysql
  vars:
    mysql_root_dir: /var/lib/mysql
    mysql_config_file: /etc/my.cnf
    mysql_log_dir: /var/log/mysql
    mysql_run_dir: /var/run/mysql
    mysql_pre_dir: /usr/share/mysql
  roles:
    - role: roles/leif160519.mysql
# }}}

- name: Install nacos cluster # {{{
  hosts: pro.nacos
  tags: never, nacos-cluster
  vars:
    open_metrics: true
    mysql_user: nacos
    mysql_password: nacos-123
    mysql_root_password: root
    mysql_database: nacos_config
    nacos_app_root_dir: /opt/applications/nacos/app
    nacos_mysql_root_dir: /opt/applications/nacos/mysql
    open_metrics: true
  roles:
    - role: roles/leif160519.nacos-cluster
# }}}

- name: Install zookeeper cluster # {{{
  hosts: pro.zookeeper
  tags: never,zookeeper-cluster
  vars:
    zookeeper_root_dir: /opt/applications/zookeeper
  roles:
    - role: roles/leif160519.zookeeper-cluster
# }}}

- name: Install kafka cluster # {{{
  hosts: pro.kafka
  tags: never, kafka-cluster
  vars:
    kafka_root_dir: /opt/applications/kafka
    auto_create_topic: false
  roles:
    - role: roles/leif160519.kafka-cluster
# }}}

- name: Install clickhouse cluster # {{{
  hosts: pro.clickhouse
  tags: never, clickhouse-cluster
  vars:
    clickhouse_log_dir: /var/log/clickhouse-server
    clickhouse_log_size: 100M
    clickhouse_log_count: 10
    clickhouse_http_port: 8123
    clickhouse_tcp_port: 9000
    clickhouse_interserver_http_port: 9009
    clickhouse_max_connections: 4096
    clickhouse_keep_alive_timeout: 3
    clickhouse_max_concurrent_queries: 100
    clickhouse_dir: /var/lib/clickhouse/
    clickhouse_tmp_dir: /var/lib/clickhouse/tmp/
    clickhouse_config_dir: /etc/clickhouse-server
    clickhouse_password: clickhouse-123
    clickhouse_cluster_name: clickhouse_cluster
  roles:
    - role: roles/leif160519.clickhouse-cluster
# }}}

- name: Install redis cluster 6.0 # {{{
  hosts: pro.redis
  tags: never, redis-cluster
  vars:
    redis_port: 6379
    redis_version: redis-6.2.6
    redis_root_dir: /opt/{{ redis_version }}
    redis_data_dir: /opt/{{ redis_version }}/data
    redis_conf_dir: /opt/{{ redis_version }}/conf
  roles:
    - role: roles/leif160519.redis-cluster
# }}}

- name: Install emqx cluster # {{{
  hosts: pro.emqx
  tags: never, emqx-cluster
  vars:
    emqx_username: test
    emqx_password: test@123
  roles:
    - role: roles/leif160519.emqx-cluster
# }}}

- name: Install oh-my-zsh # {{{
  hosts: all:!off
  tags: never, zsh, oh-my-zsh
  vars:
    username: root
    groupname: root
    zsh_theme: random
  roles:
    - role: roles/leif160519.oh-my-zsh

- name: 夹带点私货O(∩_∩)O哈哈哈~
  hosts: all:!off
  tags: never, leif
  vars:
    username: root
    groupname: root
    zsh_theme: agnoster
  tasks:
    - block:
        - lineinfile:
            dest: ~{{ username }}/.zshrc
            regexp: '^ZSH_THEME='
            line: 'ZSH_THEME={{ zsh_theme }}'
            owner: "{{ username }}"
            group: "{{ groupname }}"

        - lineinfile:
            path: ~{{ username }}/.zshrc
            line: "{{ item }}"
            owner: "{{ username }}"
            group: "{{ groupname }}"
          with_items:
            - DEFAULT_USER=$USER
            - CURRENT_BG=""
            - DALLAS_CURRENT_TIME_="%{$fg[yellow]%}%* %{$fg[red]%}%h%%%{$reset_color%}"
            - PS1="${DALLAS_CURRENT_TIME_}${PS1}"
            - HISTSIZE=100000
            - SAVEHIST=100000
            - HISTFILESIZE=100000
            - prompt_context() {}
      when: username is not match("root")
# }}}

- name: Install vim with smart tips # {{{
  hosts: all:!off
  tags: never, vim-complex
  vars:
    username: root
    groupname: root
  roles:
    - role: roles/leif160519.vim-complex
# }}}

- name: Install vim without smart tips # {{{
  hosts: all:!off
  tags: never, vim-simple
  vars:
    username: root
    groupname: root
  roles:
    - role: roles/leif160519.vim-simple
# }}}

- name: Install oh-my-fish # {{{
  hosts: all:!off
  tags: never, fish
  tasks:
    - name: 安装fish包
      package:
        name: fish
        state: latest

    - name: 清理下载的安装包缓存(Debian)
      shell: apt clean && apt autoclean
      ignore_errors: yes
      when: ansible_os_family == "Debian"

    - name: 清理下载的安装包缓存(RedHat)
      shell: yum clean all
      ignore_errors: true
      when: ansible_os_family == "RedHat"

    - name: 切换默认shell为fish
      shell: chsh -s /bin/fish
      ignore_errors: yes

    - name: 安装oh-my-fish # git 版本需要在1.9.5以上，否则会报错
      shell: curl -L https://github.com/oh-my-fish/oh-my-fish/raw/master/bin/install | fish
      ignore_errors: yes

    - name: 安装主题agnoster
      shell: omf install agnoster
      ignore_errors: yes

    - name: 安装autojump插件
      shell: omf install autojump
      ignore_errors: yes
# }}}

- name: Install loki & promtail # {{{
  hosts: all:!off
  vars:
    loki_version: v2.4.1
    promtail_version: v2.4.1

    loki_url: https://github.com/grafana/loki/releases/download/{{ loki_version }}/loki-linux-amd64.zip
    promtail_url: https://github.com/grafana/loki/releases/download/{{ promtail_version }}/promtail-linux-amd64.zip
  tasks:
    - name: promtail  # {{{
      tags: never, promtail
      block:
        - stat:
            path: /usr/local/bin/promtail
          register: p

        - name: 解压promtail安装包
          unarchive:
            copy: false
            src: "{{ promtail_url }}"
            dest: /usr/local/bin
            owner: root
            group: root
            mode: 0755
          when: p.stat.exists == false

        - name: 重命名promtail可执行文件
          command: mv /usr/local/bin/promtail-linux-amd64 /usr/local/bin/promtail
          when: p.stat.exists == false

        - name: 生成promtail配置文件
          template:
            src: files/loki/config/promtail.yml.j2
            dest: /opt/promtail.yml
            mode: 0644
            owner: root
            group: root

        - name: promtail启动命令
          set_fact:
            service_name: prmotail
            start_command: /usr/local/bin/promtail -config.file /opt/promtail.yml

        - name: 生成promtail服务
          template:
            src: files/loki/service/template.service.j2
            dest: /lib/systemd/system/promtail.service
            mode: 0644

        - name: 重新载入systemd
          systemd:
            daemon_reload: true

        - name: 启动promtail服务
          systemd:
            name: promtail
            state: started

        - name: 设置promtail服务开机自启
          systemd:
            name: promtail
            enabled: true
        # }}}

    - name: loki # {{{
      tags: never, loki
      block:
        - stat:
            path: /usr/local/bin/loki
          register: l

        - name: 解压loki安装包
          unarchive:
            copy: false
            src: "{{ loki_url }}"
            dest: /usr/local/bin
            owner: root
            group: root
            mode: 0755
          when: l.stat.exists == false

        - name: 重命名loki可执行文件
          command: mv /usr/local/bin/loki-linux-amd64 /usr/local/bin/loki
          when: l.stat.exists == false

        - name: 生成loki配置文件
          template:
            src: files/loki/config/loki.yml.j2
            dest: /opt/loki.yml
            mode: 0644
            owner: root
            group: root

        - name: loki启动命令
          set_fact:
            service_name: loki
            start_command: /usr/local/bin/loki -config.file /opt/loki.yml

        - name: 生成loki服务
          template:
            src: files/loki/service/template.service.j2
            dest: /lib/systemd/system/loki.service
            mode: 0644

        - name: 重新载入systemd
          systemd:
            daemon_reload: true

        - name: 启动loki服务
          systemd:
            name: loki
            state: started

        - name: 设置loki服务开机自启
          systemd:
            name: loki
            enabled: true
      when: inventory_hostname is match ("^prometheus-server")
      # }}}
# }}}

- name: Install nginx # {{{
  hosts: all:!off
  tags: never,nginx
  handlers:
    - name: reload nginx service
      service:
        name: nginx
        state: reloaded
        daemon_reload: yes
        enabled: true
  tasks:
    - block:
        - name: install nginx
          package:
            name: nginx
            state: latest

        - name: config nginx.conf-RedHat
          template:
            dest: /etc/nginx/nginx.conf
            src: files/nginx/RedHat.conf.j2
            owner: root
            group: root
            mode: 0644
          when: ansible_os_family == "RedHat"
          notify: reload nginx service

        - name: config nginx.conf-Debian
          template:
            dest: /etc/nginx/nginx.conf
            src: files/nginx/Debian.conf.j2
            owner: root
            group: root
            mode: 0644
          when: ansible_os_family == "Debian"
          notify: reload nginx service

# }}}

- name: Install supervisor # {{{
  hosts: all:!off
  tags: never, supervisor
  handlers:
    - name: restart supervisor service
      service:
        name: supervisord
        state: restarted
        daemon_reload: true
        enabled: true
  tasks:
    - block:
        - name: install supervisor
          package:
            name: supervisor
            state: latest

        - name: start supervisor
          service:
            name: supervisor
            state: started
            daemon_reload: true
            enabled: true
          when: ansible_os_family == "Debian"

        - name: create supervisor dir
          file:
            path: "{{ item }}"
            state: directory
            mode: 0755
            owner: root
            group: root
          with_items:
            - /etc/supervisor
            - /etc/supervisor/conf.d
          when: ansible_os_family == "RedHat"

        - name: config supervisor
          lineinfile:
            path: /etc/supervisord.conf
            regexp: "files ="
            line: "files = /etc/supervisor/conf.d/*.conf"
            insertafter: "[include]"
          notify: restart supervisor service
          when: ansible_os_family == "RedHat"
# }}}

- name: Make & Install Tengine # {{{
  hosts: all:!off
  tags: never, tengine
  roles:
    - role: roles/leif160519.tengine
# }}}
