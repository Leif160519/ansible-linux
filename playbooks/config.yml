##
# 安装基础软件
#
#
##
# @leif160519 @2020.08.29
# 默认配置用户为root，其他用户请跟参数-e username=ubuntu
####
---
- name: 1.Configure ssh  # {{{
  hosts: all
  tags: config, ssh
  tasks:
    - block:
        - lineinfile:
            dest: /etc/ssh/sshd_config
            regexp: '^(#|)UseDNS'
            line: 'UseDNS no'

        - lineinfile:
            dest: /etc/ssh/sshd_config
            regexp: '^(#|)GSSAPIAuthentication'
            line: 'GSSAPIAuthentication no'

        - lineinfile:
            dest: /etc/ssh/sshd_config
            regexp: '^(#|)ClientAliveInterval'
            line: 'ClientAliveInterval 60'

        - lineinfile:
            dest: /etc/ssh/sshd_config
            regexp: '^(#|)ClientAliveCountMax'
            line: 'ClientAliveCountMax 60'

        - lineinfile:
            dest: /etc/ssh/sshd_config
            regexp: "^(#|)PermitRootLogin"
            line: "PermitRootLogin without-password"

        - lineinfile:
            dest: /etc/ssh/sshd_config
            regexp: "^(#|)PasswordAuthentication"
            line: "PasswordAuthentication yes"

        - lineinfile:
            dest: /etc/ssh/sshd_config
            regexp: "^(#|)PermitEmptyPasswords"
            line: "PermitEmptyPasswords no"

        - lineinfile:
            dest: /etc/ssh/ssh_config
            regexp: '^(#|)   StrictHostKeyChecking'
            line: '    StrictHostKeyChecking no'

        - lineinfile:
            path: /etc/ssh/ssh_config
            line: "{{ item }}"
          with_items:
            - "    ServerAliveInterval 20"
            - "    ServerAliveCountMax 999"

        - lineinfile:
            dest: /etc/ssh/ssh_config
            regexp: "    GSSAPIAuthentication yes"
            line: "    GSSAPIAuthentication no"

        - service:
            name: sshd
            state: reloaded
  # }}}

- name: 2.Configure hostname & hosts # {{{
  hosts: all
  tags: config, host
  tasks:
    - block:
        - name: configure hostname
          hostname:
            name: "{{ inventory_hostname }}"

        - name: configure hosts
          template:
            src: files/hosts.j2
            dest: /etc/hosts
  # }}}

- name: 3.Masking system error reports # {{{
  hosts: all
  tags: config, error
  tasks:
    - block:
        - file:
            path: /var/crash/
            state: absent
          when: ansible_distribution == "Ubuntu"

        - lineinfile:
            dest: /etc/default/apport
            regexp: '^enabled='
            line: 'enabled=0'
          when: ansible_distribution == "Ubuntu"
  # }}}

- name: 4.Configure sudoer privileges # {{{
  hosts: all
  tags: config, sudo
  vars:
    username: root
  tasks:
    - block:
        - name: config sudo privileges
          lineinfile:
            dest: /etc/sudoers.d/{{ item }}
            create: yes
            line: '{{ item }} ALL=(ALL) NOPASSWD:ALL'
            mode: 0440
            owner: root
            group: root
            validate: /usr/sbin/visudo -cf %s
          with_items:
            - "{{ username }}"
          when: not ( item is match "root" )

        - name: config sudo log
          block:
            - file:
                path: /var/log/sudo.log
                state: touch
                owner: root
                group: root
                mode: 0644

            - lineinfile:
                path: /etc/rsyslog.conf
                line: "local2.debug /var/log/sudo.log"

            - lineinfile:
                path: /etc/sudoers
                line: "{{ item }}"
              with_items:
                - Defaults logfile=/var/log/sudo.log
                - Defaults loglinelen=0
                - Defaults !syslog

            - service:
                name: rsyslog
                state: restarted
  # }}}

- name: 5.Disable selinux # {{{
  hosts: all
  tags: config, seliux
  tasks:
    - block:
        - lineinfile:
            dest: /etc/selinux/config
            regexp: '^SELINUX='
            line: 'SELINUX=disabled'
          when: ansible_os_family == "RedHat"

        - name: effective immediately
          shell: setinforce 0
          ignore_errors: yes
          when: ansible_os_family == "RedHat"
  # }}}

- name: 6.Disable firewall #{{{
  hosts: all
  tags: config, firewall
  tasks:
    - block:
        - name: stop firewalld service
          service:
            name: firewalld
            state: stopped
            enabled: no
          when: ansible_os_family == "RedHat"
  # }}}

- name: 7.Configure pip # {{{
  hosts: all
  tags: never, pip, python
  vars:
    username: root
  tasks:
    - block:
        - name: create .pip directory
          file:
            path: ~{{ item }}/.pip
            state: directory
            owner: "{{ item }}"
            group: "{{ item }}"
            mode: 0755
          with_items:
            - "{{ username }}"

        - name: generate configuration file
          blockinfile:
            path: ~{{ item }}/.pip/pip.conf
            create: yes
            owner: "{{ item }}"
            group: "{{ item }}"
            block: |
              [global]
              index-url = http://mirrors.aliyun.com/pypi/simple/
              [install]
              trusted-host=mirrors.aliyun.com
          with_items:
            - "{{ username }}"
  # }}}

- name: 8.Configure shutdown wait time  # {{{
  hosts: all
  tags: config, shutdown
  tasks:
    - block:
        - lineinfile:
            dest: /etc/systemd/system.conf
            regexp: "^(#|)DefaultTimeoutStartSec"
            line: "DefaultTimeoutStartSec=10s"

        - lineinfile:
            dest: /etc/systemd/system.conf
            regexp: "^(#|)DefaultTimeoutStopSec"
            line: "DefaultTimeoutStopSec=10s"
  # }}}

- name: 9.Open cron log # {{{
  hosts: all
  tags: config, cron
  tasks:
    - block:
        - replace:
            path: /etc/rsyslog.d/50-default.conf
            regexp: "#cron"
            replace: "cron"
          when: ansible_distribution == "Ubuntu"

        - replace:
            path: /etc/rsyslog.conf
            regexp: "#cron"
            replace: "cron"
          when: (ansible_distribution == "Debian") or (ansible_os_family == "RedHat")

        - service:
            name: rsyslog
            state: restarted
            enabled: yes
  # }}}

- name: 10.Configure bash # {{{
  hosts: all
  tags: config, bash
  vars:
    username: root
  tasks:
    - block:
        - file:
            path: /etc/bash.d
            state: directory

        - template:
            src: files/bash.d/bash-ps1.sh.j2
            dest: /etc/bash.d/bash-ps1.sh
            force: yes
            mode: 0755
            owner: root
            group: root

        - copy:
            src: "{{ item }}"
            dest: /etc/bash.d/
            mode: 0755
            owner: root
            group: root
          with_fileglob:
            - "files/bash.d/*.sh"

        - blockinfile:
            dest: "~{{ item }}/.bashrc"
            create: yes
            owner: "{{ item }}"
            group: "{{ item }}"
            block: |
              if [ -d /etc/bash.d ]; then
                for i in /etc/bash.d/*.sh; do
                  if [ -r $i ]; then
                    . $i
                  fi
                done
                unset i
              fi
          with_items:
            - "{{ username }}"

  # }}}

- name: 11.Configure clock & time zone # {{{
  hosts: all
  tags: config, clock, time
  tasks:
    - block:
        - timezone:
            hwclock: UTC
            name: Asia/Shanghai
  # }}}

- name: 12.Configure the default editor # {{{
  hosts: all
  tags: config, editor
  vars:
    username: root
  tasks:
    - block:
        - lineinfile:
            dest: "~{{ item }}/.selected_editor"
            create: yes
            mode: 0644
            owner: "{{ item }}"
            group: "{{ item }}"
            line: 'SELECTED_EDITOR="/usr/bin/vim.basic"'
            state: present
          with_items:
            - "{{ username }}"
          # }}}

- name: 13.Rewrite cron templates  # {{{
  hosts: all
  tags: config, cron
  vars:
    username: root
  tasks:
    - block:
        - template:
            dest: "/var/spool/cron/crontabs/{{ item }}"
            src: files/crontab
            mode: 0644
            owner: "{{ item }}"
            group: crontab
          with_items:
            - "{{ username }}"
          ignore_errors: yes
         # }}}

- name: 14.Configure git #{{{
  hosts: all
  tags: config, git
  tasks:
    - block:
        - shell: |
            git config --global core.editor vim
            git config --global core.quotepath false
          ignore_errors: yes
  # }}}

- name: 15.Uninstall useless kernel # {{{
  hosts: os.ubuntu
  tags: never, kernel
  tasks:
    - block:
        - name: get the kernel version number currently in use
          shell: /bin/uname -r | sed 's/-generic//g'
          register: current_version

        - name: get the kernel software that needs to be uninstalled
          shell: /usr/bin/dpkg -l | grep "linux-image\|linux-headers\|linux-modules" | awk '{print $2}' | grep -v "{{ current_version.stdout }}" | cat
          register: before

        - name: configure dpkg
          shell: /usr/bin/dpkg --configure -a

        - name: clean up useless kernels
          shell: /usr/bin/dpkg -l | grep "linux-image\|linux-headers\|linux-modules" | awk '{print $2}' | grep -v linux-image-generic | grep -v "{{ current_version.stdout }}" | xargs apt-get -y purge
          ignore_errors: yes
          when: not (before.stdout == "")

        - name: clean up residue
          shell: apt-get autoremove --purge -y

        - name: update grub
          shell: /usr/sbin/update-grub

        - name: get the cleaned kernel
          shell: /usr/bin/dpkg -l | grep "linux-image\|linux-headers\|linux-modules" | awk '{print $2}'
          register: after

        - name: disable kernel update
          shell: /usr/bin/dpkg -l | grep "linux-image\|linux-headers\|linux-modules" | awk '{print $2}' | xargs /usr/bin/apt-mark hold
          register: hold_result

        - debug:
            var: after.stdout_lines

        - debug:
            var: hold_result.stdout_lines
      when: ansible_distribution == "Ubuntu"
  # }}}

- name: 16.Disable system update # {{{
  hosts: os.ubuntu
  tags: never, update
  tasks:
    - block:
        - name: close Update-Package-Lists
          shell: sed -i.bak 's/1/0/' /etc/apt/apt.conf.d/10periodic

        - name: close unattended-upgrades (or `dpkg-reconfigure unattended-upgrades` choose `no`)
          shell: sed -i.bak 's/1/0/' /etc/apt/apt.conf.d/20auto-upgrades

        - name: disable unattended-upgrades service
          service:
            name: unattended-upgrades
            state: stopped
            enabled: false

        - name: remove unattended-upgrades service
          package:
            name: unattended-upgrades
            state: absent

      when: ansible_distribution == "Ubuntu"
# }}}

- name: 17.Disable install snapd # {{{
  hosts: os.debian
  tags: never, snap
  tasks:
    - block:
        - blockinfile:
            path: /etc/apt/preferences.d/nosnap.pref
            block: |
              Package: snap*
              Pin: release a=*
              Pin-Priority: -10
            create: yes
            mode: 0644
            owner: root
            group: root
# }}}

- name: 18.You have new mail. # {{{
  hosts: all
  tags: config, mail
  tasks:
    - block:
        - shell: ls /var/mail/
          register: file_list

        - file:
            path: "/var/mail/{{ item }}"
            state: absent
          with_items:
            - "{{ file_list.stdout_lines }}"
# }}}

- name: 19.create sshkey # {{{
  hosts: all
  vars:
    username: root
  tags: never, sshkey
  tasks:
    - block:
        - user:
            name: "{{ item }}"
            comment: "{{ item }}"
            group: "{{ item }}"
            generate_ssh_key: yes
            ssh_key_file: ~{{ item }}/.ssh/id_rsa
            state: present
          with_items:
            - "{{ username }}"
          ignore_errors: yes
# }}}

- name: 20.config resolv # {{{
  hosts: all
  tags: never, resolv
  roles:
    - role: roles/ahuffman.resolv
      resolv_nameservers:
        - 180.76.76.76
        - 114.114.114.114
      resolv_domain: localdomain
      resolv_search:
        - localdomain
      resolv_options:
        - timeout:2
        - rotate
# }}}

- name: 21.config static ip address # {{{
  hosts: all
  tags: never, network
  vars:
    dns1: 180.76.76.76
    dns2: 114.114.114.114
    search: localdomain
  roles:
    - role: roles/leif160519.network
# }}}

- name: 22.config ntp # {{{
  # 注意：ubuntu20.04的系统请将ansible版本升级至2.9.8以上或使用2.10(使用pip3而不是apt)，详情参看：https://github.com/geerlingguy/ansible-role-ntp/issues/86
  hosts: all
  tags: never, ntp
  roles:
    - role: roles/geerlingguy.ntp
      ntp_enabled: true
      ntp_timezone: "Asia/Shanghai"
      ntp_manage_config: true
      ntp_servers:
        - "ntp{{ '.' + ntp_area if ntp_area else '' }}.aliyun.com"
        - "ntp1{{ '.' + ntp_area if ntp_area else '' }}.aliyun.com"
        - "ntp2{{ '.' + ntp_area if ntp_area else '' }}.aliyun.com"
        - "ntp3{{ '.' + ntp_area if ntp_area else '' }}.aliyun.com"
      ntp_restrict:
        - "127.0.0.1"
        - "::1"
      ntp_cron_handler_enabled: true
      ntp_tinker_panic: true
# }}}
