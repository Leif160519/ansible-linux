---
- name: perform preflight
  shell: kubeadm init phase preflight
  timeout: 10
  changed_when: false
  ignore_errors: true

- name: list required mirrors
  shell: kubeadm config images list
  changed_when: false
  register: require_mirror

- debug:
    var: require_mirror.stdout_lines

- name: list required mirrors prefix
  shell: kubeadm config images list | awk -F/ '{print $1}' | uniq
  changed_when: false
  register: mirrors_prefix

- assert:
    that: mirrors_prefix is defined
    success_msg: "mirrors_prefix is {{ mirrors_prefix.stdout_lines }}"
    fail_msg: "mirrors_prefix is not defined"

- name: list apiserver version
  shell: kubeadm config images list  | grep apiserver | awk -F':' '{print $NF}'
  changed_when: false
  register: apiserver_version

- assert:
    that: apiserver_version is defined
    success_msg: "apiserver_version is {{ apiserver_version.stdout_lines }}"
    fail_msg: "apiserver_version is not defined"

- name: download the image required by kubeadm from aliyun
  shell: kubeadm config images pull --image-repository={{ image_repository }}

- name: docker pull images
  shell: kubeadm config images pull --image-repository={{ image_repository }} | awk '{print "docker pull "$NF}' | bash

- name: show docker images
  shell: docker images | grep google_containers
  changed_when: false
  register: docker_images

- assert:
    that: docker_images.rc == 0
    success_msg: "images pull successfully"
    fail_msg: "images pull failed !"

- debug:
    var: docker_images.stdout_lines
  when: docker_images.rc == 0

- name: rename docker images
  shell: kubeadm config images list | awk -F/ '{print "docker tag  {{ image_repository }}/"$NF " {{ mirrors_prefix.stdout_lines[0] }}/"$NF}' | bash
  when: docker_images.rc == 0

- name: list docker images
  shell: docker images | grep "{{ mirrors_prefix.stdout_lines[0] }}"
  changed_when: false
  register: after_rename_images

- assert:
    that: after_rename_images.rc == 0
    success_msg: "rename docker images successfully"
    fail_msg: "rename docker images failed"

- debug:
    var: after_rename_images.stdout_lines
